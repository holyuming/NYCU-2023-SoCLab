-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_n11_strm is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    pstrmInput_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    pstrmInput_TVALID : IN STD_LOGIC;
    pstrmInput_TREADY : OUT STD_LOGIC;
    pstrmInput_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    pstrmInput_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    pstrmInput_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    pstrmInput_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    pstrmInput_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    pstrmInput_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    pstrmOutput_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    pstrmOutput_TVALID : OUT STD_LOGIC;
    pstrmOutput_TREADY : IN STD_LOGIC;
    pstrmOutput_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    pstrmOutput_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    pstrmOutput_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    pstrmOutput_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    pstrmOutput_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    pstrmOutput_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fir_n11_strm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_n11_strm_fir_n11_strm,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.290000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=952,HLS_SYN_LUT=1082,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv33_3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal an32Coef_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal regXferLeng : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_187 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start : STD_LOGIC;
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_done : STD_LOGIC;
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_idle : STD_LOGIC;
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_ready : STD_LOGIC;
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_an32Coef_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_an32Coef_ce0 : STD_LOGIC;
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmInput_TREADY : STD_LOGIC;
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID : STD_LOGIC;
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TREADY : STD_LOGIC;
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln1541_fu_167_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_171_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_pstrmOutput_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal regslice_both_pstrmInput_V_data_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal pstrmInput_TVALID_int_regslice : STD_LOGIC;
    signal pstrmInput_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_pstrmInput_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_pstrmInput_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_pstrmInput_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_user_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pstrmInput_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_last_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pstrmInput_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_id_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pstrmInput_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_pstrmInput_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal pstrmInput_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_pstrmInput_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmInput_V_dest_V_U_ack_in : STD_LOGIC;
    signal pstrmOutput_TVALID_int_regslice : STD_LOGIC;
    signal pstrmOutput_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_pstrmOutput_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_n11_strm_fir_n11_strm_Pipeline_XFER_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pstrmInput_TVALID : IN STD_LOGIC;
        an32Coef_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        an32Coef_ce0 : OUT STD_LOGIC;
        an32Coef_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        zext_ln20 : IN STD_LOGIC_VECTOR (30 downto 0);
        pstrmInput_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        pstrmInput_TREADY : OUT STD_LOGIC;
        pstrmInput_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        pstrmInput_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        pstrmInput_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        pstrmInput_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        pstrmInput_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        pstrmInput_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        pstrmOutput_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        pstrmOutput_TVALID : OUT STD_LOGIC;
        pstrmOutput_TREADY : IN STD_LOGIC;
        pstrmOutput_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        pstrmOutput_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        pstrmOutput_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        pstrmOutput_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        pstrmOutput_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        pstrmOutput_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fir_n11_strm_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        regXferLeng : OUT STD_LOGIC_VECTOR (31 downto 0);
        an32Coef_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        an32Coef_ce0 : IN STD_LOGIC;
        an32Coef_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fir_n11_strm_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112 : component fir_n11_strm_fir_n11_strm_Pipeline_XFER_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start,
        ap_done => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_done,
        ap_idle => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_idle,
        ap_ready => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_ready,
        pstrmInput_TVALID => pstrmInput_TVALID_int_regslice,
        an32Coef_address0 => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_an32Coef_address0,
        an32Coef_ce0 => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_an32Coef_ce0,
        an32Coef_q0 => an32Coef_q0,
        zext_ln20 => tmp_reg_187,
        pstrmInput_TDATA => pstrmInput_TDATA_int_regslice,
        pstrmInput_TREADY => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmInput_TREADY,
        pstrmInput_TKEEP => pstrmInput_TKEEP_int_regslice,
        pstrmInput_TSTRB => pstrmInput_TSTRB_int_regslice,
        pstrmInput_TUSER => pstrmInput_TUSER_int_regslice,
        pstrmInput_TLAST => pstrmInput_TLAST_int_regslice,
        pstrmInput_TID => pstrmInput_TID_int_regslice,
        pstrmInput_TDEST => pstrmInput_TDEST_int_regslice,
        pstrmOutput_TDATA => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TDATA,
        pstrmOutput_TVALID => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID,
        pstrmOutput_TREADY => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TREADY,
        pstrmOutput_TKEEP => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TKEEP,
        pstrmOutput_TSTRB => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TSTRB,
        pstrmOutput_TUSER => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TUSER,
        pstrmOutput_TLAST => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TLAST,
        pstrmOutput_TID => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TID,
        pstrmOutput_TDEST => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TDEST);

    control_s_axi_U : component fir_n11_strm_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        regXferLeng => regXferLeng,
        an32Coef_address0 => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_an32Coef_address0,
        an32Coef_ce0 => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_an32Coef_ce0,
        an32Coef_q0 => an32Coef_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_pstrmInput_V_data_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TDATA,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_data_V_U_ack_in,
        data_out => pstrmInput_TDATA_int_regslice,
        vld_out => pstrmInput_TVALID_int_regslice,
        ack_out => pstrmInput_TREADY_int_regslice,
        apdone_blk => regslice_both_pstrmInput_V_data_V_U_apdone_blk);

    regslice_both_pstrmInput_V_keep_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TKEEP,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_keep_V_U_ack_in,
        data_out => pstrmInput_TKEEP_int_regslice,
        vld_out => regslice_both_pstrmInput_V_keep_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int_regslice,
        apdone_blk => regslice_both_pstrmInput_V_keep_V_U_apdone_blk);

    regslice_both_pstrmInput_V_strb_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TSTRB,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_strb_V_U_ack_in,
        data_out => pstrmInput_TSTRB_int_regslice,
        vld_out => regslice_both_pstrmInput_V_strb_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int_regslice,
        apdone_blk => regslice_both_pstrmInput_V_strb_V_U_apdone_blk);

    regslice_both_pstrmInput_V_user_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TUSER,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_user_V_U_ack_in,
        data_out => pstrmInput_TUSER_int_regslice,
        vld_out => regslice_both_pstrmInput_V_user_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int_regslice,
        apdone_blk => regslice_both_pstrmInput_V_user_V_U_apdone_blk);

    regslice_both_pstrmInput_V_last_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TLAST,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_last_V_U_ack_in,
        data_out => pstrmInput_TLAST_int_regslice,
        vld_out => regslice_both_pstrmInput_V_last_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int_regslice,
        apdone_blk => regslice_both_pstrmInput_V_last_V_U_apdone_blk);

    regslice_both_pstrmInput_V_id_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TID,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_id_V_U_ack_in,
        data_out => pstrmInput_TID_int_regslice,
        vld_out => regslice_both_pstrmInput_V_id_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int_regslice,
        apdone_blk => regslice_both_pstrmInput_V_id_V_U_apdone_blk);

    regslice_both_pstrmInput_V_dest_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => pstrmInput_TDEST,
        vld_in => pstrmInput_TVALID,
        ack_in => regslice_both_pstrmInput_V_dest_V_U_ack_in,
        data_out => pstrmInput_TDEST_int_regslice,
        vld_out => regslice_both_pstrmInput_V_dest_V_U_vld_out,
        ack_out => pstrmInput_TREADY_int_regslice,
        apdone_blk => regslice_both_pstrmInput_V_dest_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_data_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TDATA,
        vld_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID,
        ack_in => pstrmOutput_TREADY_int_regslice,
        data_out => pstrmOutput_TDATA,
        vld_out => regslice_both_pstrmOutput_V_data_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_data_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_keep_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TKEEP,
        vld_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID,
        ack_in => regslice_both_pstrmOutput_V_keep_V_U_ack_in_dummy,
        data_out => pstrmOutput_TKEEP,
        vld_out => regslice_both_pstrmOutput_V_keep_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_keep_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_strb_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TSTRB,
        vld_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID,
        ack_in => regslice_both_pstrmOutput_V_strb_V_U_ack_in_dummy,
        data_out => pstrmOutput_TSTRB,
        vld_out => regslice_both_pstrmOutput_V_strb_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_strb_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_user_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TUSER,
        vld_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID,
        ack_in => regslice_both_pstrmOutput_V_user_V_U_ack_in_dummy,
        data_out => pstrmOutput_TUSER,
        vld_out => regslice_both_pstrmOutput_V_user_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_user_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_last_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TLAST,
        vld_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID,
        ack_in => regslice_both_pstrmOutput_V_last_V_U_ack_in_dummy,
        data_out => pstrmOutput_TLAST,
        vld_out => regslice_both_pstrmOutput_V_last_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_last_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_id_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TID,
        vld_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID,
        ack_in => regslice_both_pstrmOutput_V_id_V_U_ack_in_dummy,
        data_out => pstrmOutput_TID,
        vld_out => regslice_both_pstrmOutput_V_id_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_id_V_U_apdone_blk);

    regslice_both_pstrmOutput_V_dest_V_U : component fir_n11_strm_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TDEST,
        vld_in => grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID,
        ack_in => regslice_both_pstrmOutput_V_dest_V_U_ack_in_dummy,
        data_out => pstrmOutput_TDEST,
        vld_out => regslice_both_pstrmOutput_V_dest_V_U_vld_out,
        ack_out => pstrmOutput_TREADY,
        apdone_blk => regslice_both_pstrmOutput_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_reg_187 <= ret_V_fu_171_p2(32 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_both_pstrmOutput_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_pstrmOutput_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_done)
    begin
        if ((grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(regslice_both_pstrmOutput_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_pstrmOutput_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, regslice_both_pstrmOutput_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_pstrmOutput_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_pstrmOutput_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_pstrmOutput_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start <= grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_ap_start_reg;
    grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TREADY <= (pstrmOutput_TREADY_int_regslice and ap_CS_fsm_state3);
    pstrmInput_TREADY <= regslice_both_pstrmInput_V_data_V_U_ack_in;

    pstrmInput_TREADY_int_regslice_assign_proc : process(grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmInput_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pstrmInput_TREADY_int_regslice <= grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmInput_TREADY;
        else 
            pstrmInput_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    pstrmOutput_TVALID <= regslice_both_pstrmOutput_V_data_V_U_vld_out;
    pstrmOutput_TVALID_int_regslice <= grp_fir_n11_strm_Pipeline_XFER_LOOP_fu_112_pstrmOutput_TVALID;
    ret_V_fu_171_p2 <= std_logic_vector(unsigned(zext_ln1541_fu_167_p1) + unsigned(ap_const_lv33_3));
    zext_ln1541_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(regXferLeng),33));
end behav;
