// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_n11_strm_fir_n11_strm_Pipeline_XFER_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pstrmInput_TVALID,
        an32Coef_address0,
        an32Coef_ce0,
        an32Coef_q0,
        zext_ln20,
        pstrmInput_TDATA,
        pstrmInput_TREADY,
        pstrmInput_TKEEP,
        pstrmInput_TSTRB,
        pstrmInput_TUSER,
        pstrmInput_TLAST,
        pstrmInput_TID,
        pstrmInput_TDEST,
        pstrmOutput_TDATA,
        pstrmOutput_TVALID,
        pstrmOutput_TREADY,
        pstrmOutput_TKEEP,
        pstrmOutput_TSTRB,
        pstrmOutput_TUSER,
        pstrmOutput_TLAST,
        pstrmOutput_TID,
        pstrmOutput_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 11'd1;
parameter    ap_ST_fsm_pp0_stage1 = 11'd2;
parameter    ap_ST_fsm_pp0_stage2 = 11'd4;
parameter    ap_ST_fsm_pp0_stage3 = 11'd8;
parameter    ap_ST_fsm_pp0_stage4 = 11'd16;
parameter    ap_ST_fsm_pp0_stage5 = 11'd32;
parameter    ap_ST_fsm_pp0_stage6 = 11'd64;
parameter    ap_ST_fsm_pp0_stage7 = 11'd128;
parameter    ap_ST_fsm_pp0_stage8 = 11'd256;
parameter    ap_ST_fsm_pp0_stage9 = 11'd512;
parameter    ap_ST_fsm_pp0_stage10 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   pstrmInput_TVALID;
output  [3:0] an32Coef_address0;
output   an32Coef_ce0;
input  [31:0] an32Coef_q0;
input  [30:0] zext_ln20;
input  [31:0] pstrmInput_TDATA;
output   pstrmInput_TREADY;
input  [3:0] pstrmInput_TKEEP;
input  [3:0] pstrmInput_TSTRB;
input  [0:0] pstrmInput_TUSER;
input  [0:0] pstrmInput_TLAST;
input  [0:0] pstrmInput_TID;
input  [0:0] pstrmInput_TDEST;
output  [31:0] pstrmOutput_TDATA;
output   pstrmOutput_TVALID;
input   pstrmOutput_TREADY;
output  [3:0] pstrmOutput_TKEEP;
output  [3:0] pstrmOutput_TSTRB;
output  [0:0] pstrmOutput_TUSER;
output  [0:0] pstrmOutput_TLAST;
output  [0:0] pstrmOutput_TID;
output  [0:0] pstrmOutput_TDEST;

reg ap_idle;
reg[3:0] an32Coef_address0;
reg an32Coef_ce0;
reg pstrmInput_TREADY;
reg pstrmOutput_TVALID;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage10;
reg   [0:0] icmp_ln22_reg_556;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_subdone;
wire   [0:0] tmp_last_V_fu_464_p1;
reg    ap_condition_exit_pp0_iter0_stage10;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg  signed [31:0] an32ShiftReg_9;
reg  signed [31:0] an32ShiftReg_8;
reg  signed [31:0] an32ShiftReg_7;
reg  signed [31:0] an32ShiftReg_6;
reg  signed [31:0] an32ShiftReg_5;
reg  signed [31:0] an32ShiftReg_4;
reg  signed [31:0] an32ShiftReg_3;
reg  signed [31:0] an32ShiftReg_2;
reg  signed [31:0] an32ShiftReg_1;
reg  signed [31:0] an32ShiftReg_0;
reg    pstrmInput_TDATA_blk_n;
wire    ap_block_pp0_stage10;
reg    pstrmOutput_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [30:0] n32XferCnt_load_reg_546;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state12_pp0_stage0_iter1;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln22_fu_279_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] mul_ln35_fu_289_p2;
reg   [31:0] mul_ln35_reg_565;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] add_ln35_fu_311_p2;
reg   [31:0] add_ln35_reg_575;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] mul_ln35_2_fu_326_p2;
reg   [31:0] mul_ln35_2_reg_585;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] mul_ln35_3_fu_342_p2;
reg   [31:0] mul_ln35_3_reg_595;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [31:0] add_ln35_2_fu_369_p2;
reg   [31:0] add_ln35_2_reg_605;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [31:0] mul_ln35_5_fu_384_p2;
reg   [31:0] mul_ln35_5_reg_615;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] mul_ln35_6_fu_400_p2;
reg   [31:0] mul_ln35_6_reg_625;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire   [31:0] add_ln35_4_fu_422_p2;
reg   [31:0] add_ln35_4_reg_635;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire   [31:0] mul_ln35_8_fu_437_p2;
reg   [31:0] mul_ln35_8_reg_645;
reg    ap_block_pp0_stage10_11001;
reg  signed [31:0] tmp_data_V_reg_655;
reg   [3:0] tmp_keep_V_reg_660;
reg   [3:0] tmp_strb_V_reg_665;
reg   [0:0] tmp_user_V_reg_670;
reg   [0:0] tmp_last_V_reg_675;
reg   [0:0] tmp_id_V_reg_680;
reg   [0:0] tmp_dest_V_reg_685;
wire   [31:0] mul_ln35_9_fu_486_p2;
reg   [31:0] mul_ln35_9_reg_690;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage9;
reg   [30:0] n32XferCnt_fu_114;
wire   [30:0] n32XferCnt_1_fu_443_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_n32XferCnt_load;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] mul_ln35_1_fu_305_p2;
wire   [31:0] mul_ln35_4_fu_358_p2;
wire   [31:0] add_ln35_1_fu_364_p2;
wire   [31:0] mul_ln35_7_fu_416_p2;
wire   [31:0] mul_ln35_10_fu_503_p2;
wire   [31:0] add_ln35_6_fu_516_p2;
wire   [31:0] add_ln35_7_fu_521_p2;
wire   [31:0] add_ln35_5_fu_512_p2;
wire   [31:0] add_ln35_8_fu_526_p2;
wire   [31:0] add_ln35_3_fu_508_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_done_pending_pp0;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 an32ShiftReg_9 = 32'd0;
#0 an32ShiftReg_8 = 32'd0;
#0 an32ShiftReg_7 = 32'd0;
#0 an32ShiftReg_6 = 32'd0;
#0 an32ShiftReg_5 = 32'd0;
#0 an32ShiftReg_4 = 32'd0;
#0 an32ShiftReg_3 = 32'd0;
#0 an32ShiftReg_2 = 32'd0;
#0 an32ShiftReg_1 = 32'd0;
#0 an32ShiftReg_0 = 32'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_9),
    .dout(mul_ln35_fu_289_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U2(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_8),
    .dout(mul_ln35_1_fu_305_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_7),
    .dout(mul_ln35_2_fu_326_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_6),
    .dout(mul_ln35_3_fu_342_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_5),
    .dout(mul_ln35_4_fu_358_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_4),
    .dout(mul_ln35_5_fu_384_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_3),
    .dout(mul_ln35_6_fu_400_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U8(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_2),
    .dout(mul_ln35_7_fu_416_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_1),
    .dout(mul_ln35_8_fu_437_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U10(
    .din0(an32Coef_q0),
    .din1(an32ShiftReg_0),
    .dout(mul_ln35_9_fu_486_p2)
);

fir_n11_strm_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U11(
    .din0(an32Coef_q0),
    .din1(tmp_data_V_reg_655),
    .dout(mul_ln35_10_fu_503_p2)
);

fir_n11_strm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage10),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n32XferCnt_fu_114 <= 31'd0;
    end else if (((tmp_last_V_fu_464_p1 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        n32XferCnt_fu_114 <= n32XferCnt_1_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln35_2_reg_605 <= add_ln35_2_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        add_ln35_4_reg_635 <= add_ln35_4_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln35_reg_575 <= add_ln35_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        an32ShiftReg_0 <= pstrmInput_TDATA;
        an32ShiftReg_1 <= an32ShiftReg_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        an32ShiftReg_2 <= an32ShiftReg_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        an32ShiftReg_3 <= an32ShiftReg_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        an32ShiftReg_4 <= an32ShiftReg_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        an32ShiftReg_5 <= an32ShiftReg_4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        an32ShiftReg_6 <= an32ShiftReg_5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        an32ShiftReg_7 <= an32ShiftReg_6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        an32ShiftReg_8 <= an32ShiftReg_7;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        an32ShiftReg_9 <= an32ShiftReg_8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln22_reg_556 <= icmp_ln22_fu_279_p2;
        n32XferCnt_load_reg_546 <= ap_sig_allocacmp_n32XferCnt_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln35_2_reg_585 <= mul_ln35_2_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_ln35_3_reg_595 <= mul_ln35_3_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mul_ln35_5_reg_615 <= mul_ln35_5_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mul_ln35_6_reg_625 <= mul_ln35_6_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        mul_ln35_8_reg_645 <= mul_ln35_8_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        mul_ln35_9_reg_690 <= mul_ln35_9_fu_486_p2;
        tmp_data_V_reg_655 <= pstrmInput_TDATA;
        tmp_dest_V_reg_685 <= pstrmInput_TDEST;
        tmp_id_V_reg_680 <= pstrmInput_TID;
        tmp_keep_V_reg_660 <= pstrmInput_TKEEP;
        tmp_last_V_reg_675 <= pstrmInput_TLAST;
        tmp_strb_V_reg_665 <= pstrmInput_TSTRB;
        tmp_user_V_reg_670 <= pstrmInput_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln22_reg_556 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln35_reg_565 <= mul_ln35_fu_289_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            an32Coef_address0 = 64'd0;
        end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            an32Coef_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            an32Coef_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            an32Coef_address0 = 64'd3;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            an32Coef_address0 = 64'd4;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            an32Coef_address0 = 64'd5;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            an32Coef_address0 = 64'd6;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            an32Coef_address0 = 64'd7;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            an32Coef_address0 = 64'd8;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            an32Coef_address0 = 64'd9;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            an32Coef_address0 = 64'd10;
        end else begin
            an32Coef_address0 = 'bx;
        end
    end else begin
        an32Coef_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        an32Coef_ce0 = 1'b1;
    end else begin
        an32Coef_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & ((tmp_last_V_fu_464_p1 == 1'd1) | (icmp_ln22_reg_556 == 1'd0)))) begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln22_reg_556 == 1'd0) | (tmp_last_V_reg_675 == 1'd1)))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready == 1'b0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n32XferCnt_load = 31'd0;
    end else begin
        ap_sig_allocacmp_n32XferCnt_load = n32XferCnt_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        pstrmInput_TDATA_blk_n = pstrmInput_TVALID;
    end else begin
        pstrmInput_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        pstrmInput_TREADY = 1'b1;
    end else begin
        pstrmInput_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pstrmOutput_TDATA_blk_n = pstrmOutput_TREADY;
    end else begin
        pstrmOutput_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pstrmOutput_TVALID = 1'b1;
    end else begin
        pstrmOutput_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_1_fu_364_p2 = (mul_ln35_3_reg_595 + mul_ln35_4_fu_358_p2);

assign add_ln35_2_fu_369_p2 = (add_ln35_1_fu_364_p2 + mul_ln35_2_reg_585);

assign add_ln35_3_fu_508_p2 = (add_ln35_2_reg_605 + add_ln35_reg_575);

assign add_ln35_4_fu_422_p2 = (mul_ln35_6_reg_625 + mul_ln35_7_fu_416_p2);

assign add_ln35_5_fu_512_p2 = (add_ln35_4_reg_635 + mul_ln35_5_reg_615);

assign add_ln35_6_fu_516_p2 = (mul_ln35_9_reg_690 + mul_ln35_10_fu_503_p2);

assign add_ln35_7_fu_521_p2 = (add_ln35_6_fu_516_p2 + mul_ln35_8_reg_645);

assign add_ln35_8_fu_526_p2 = (add_ln35_7_fu_521_p2 + add_ln35_5_fu_512_p2);

assign add_ln35_fu_311_p2 = (mul_ln35_1_fu_305_p2 + mul_ln35_reg_565);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((pstrmOutput_TREADY == 1'b0) & (icmp_ln22_reg_556 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((pstrmOutput_TREADY == 1'b0) & (icmp_ln22_reg_556 == 1'd1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((pstrmOutput_TREADY == 1'b0) & (icmp_ln22_reg_556 == 1'd1))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((icmp_ln22_reg_556 == 1'd1) & (pstrmInput_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((icmp_ln22_reg_556 == 1'd1) & (pstrmInput_TVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((icmp_ln22_reg_556 == 1'd1) & (pstrmInput_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state12_io = ((pstrmOutput_TREADY == 1'b0) & (icmp_ln22_reg_556 == 1'd1));
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter1 = ((pstrmOutput_TREADY == 1'b0) & (icmp_ln22_reg_556 == 1'd1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage10;

assign icmp_ln22_fu_279_p2 = ((ap_sig_allocacmp_n32XferCnt_load < zext_ln20) ? 1'b1 : 1'b0);

assign n32XferCnt_1_fu_443_p2 = (n32XferCnt_load_reg_546 + 31'd1);

assign pstrmOutput_TDATA = (add_ln35_8_fu_526_p2 + add_ln35_3_fu_508_p2);

assign pstrmOutput_TDEST = tmp_dest_V_reg_685;

assign pstrmOutput_TID = tmp_id_V_reg_680;

assign pstrmOutput_TKEEP = tmp_keep_V_reg_660;

assign pstrmOutput_TLAST = tmp_last_V_reg_675;

assign pstrmOutput_TSTRB = tmp_strb_V_reg_665;

assign pstrmOutput_TUSER = tmp_user_V_reg_670;

assign tmp_last_V_fu_464_p1 = pstrmInput_TLAST;

endmodule //fir_n11_strm_fir_n11_strm_Pipeline_XFER_LOOP
